摘要：Object类可以带来参数类型的统一处理，但是会存在有安全隐患，本节主要分析Object接收任意对象实例以及向下转型所带来的问题。

泛型是从JDK1.5之后追加到Java语言里面的，其主要目的是为了解决ClassCastException的问题，在进行对象向下转型的时候都可能存在安全隐患，而Java希望通过泛型可以慢慢解决掉此类问题。

泛型问题引出：
现在假设说定义一个 描述x与y坐标的处理类，并且在这个类之中允许开发者保存有三类数据：
  - 整型数据：x=10；y=20
  - 浮点型数据：x=10.1；y=20.9
  - 字符串型数据：x=东经120度、北纬30度

于是在设计Point类的时候就需要去考虑具体的x和y属性的类型，这个类型要求可以保存以上三种数据，很明，最原始的做法就是利用Object类来进行定义，因为存在有如下的转型关系：
  - 整型数据：基本数据类型经过包装处理 -> 包装为Integer类对象 -> 自动向上转型为Object类对象
  - 浮点型数据：基本数据类型经过包装处理 -> 包装为Double类对象 -> 自动向上转型为Object类对象
  - 字符串型数据：String类对象 -> 自动向上转型为Object

  Object类可以统一参数，但是它的范围太广了并且向下转型有安全隐患，最好的方法是不进行向下转型，
  因此才有了后面的泛型开发。（Object是造成泛型出现的主要原因）