接口必须有子类，并且子类可以通过对象向上转型来实例化接口的对象，但是对象实例化过程中也可能存在设计问题。

如果说现在面包吃腻了，想喝牛奶了，那么客户端就要做出修改。客户端应该关注食物本身而不是关注食物怎么来的。

范例：扩展一类食物
新定一个食物类后，如果要实现必须要去改客户端，这是很不友好的。（出现耦合问题）

什么是耦合？
耦合度指程序模块间联系的紧密程度，
内聚性则是模块内部的相互依赖程度；

模块之间关联越少 耦合度越低
功能越单一 内聚性越高

软件设计版中常用耦合度和内聚度作为衡量模块独立程度的标准。
软件设计的一个准则就是高内聚低耦合。

此时该程序出现耦合问题的直接元凶：“关键字new”。
关键字new给我们提供的只是一个最原始的对象实例化处理，它也是造成开发之中代码耦合度高的关键原因。

以JVM的设计为例：
Java实现可移植性的关键在于JVM，而JVM的核心原理：利用虚拟机来运行Java程序，所有的程序并不与具体的操作系统有任何的关联，而是由JVM来进行匹配。
因此，得出结论：良好的设计应该避免耦合。