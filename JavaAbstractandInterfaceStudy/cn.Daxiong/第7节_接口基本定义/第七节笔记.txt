接口的基本定义：
抽象类与普通类相比，最大的优势在于：可以实现对子类覆写方法的控制，但是在抽象类里面可能依然会保留有一些普通方法，
而普通方法里面可能会设计到一些安全或者隐私的操作问题，那么在进行开发的过程之中，如果要想对外部隐藏全部的细节，就可以通过接口来进行描述。（当我们学到分布式开发的时候就能深刻理解了）

接口可以理解为一个纯粹的抽象类，只包含抽象方法和全局常量。

从JDK1.8之后，引入了Lambda表达式的概念，所以接口的定义也得到了加强，除了抽象方法与全局常量之外，还可以定义普通方法或静态方法。(从这可以看出接口的概念正在放松)。
如果从设计本身的角度来讲，接口之中还是应该以抽象方法和全局常量为主

接口的使用原则如下：
- 接口需要被子类实现(implements)，一个子类可以实现多个父类接口；
- 子类（如果不是抽象类），一定要覆写接口之中的全部抽象方法；
- 接口对象可以利用子类对象的向上转型进行实例化；

在Java里面之所以使用接口的主要目的是：
一个子类可以实现多个接口，利用接口可以实现多继承！（而在抽象类中不可以有多继承）

接口描述的是一个公共的定义标准，所以在接口之中所有的抽象方法的访问权限都为public,也就是说写与不写都是一样的。


- 接口中方法可以省略abstract，抽象类不能省略；
- 接口中方法可以省略public权限后默认public，抽象类中方法省略后默认default
（default权限比public权限小一些，也就是说抽象方法定义default，子类可以定义default和public，只可以加权限不可以减权限）